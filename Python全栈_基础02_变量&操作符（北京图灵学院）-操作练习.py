# 字符串
# 	·转义字符
# 	·格式化
# 	·内建函数（后延）
# 	转义字符
# 		·用一个特殊的方法表示出一系列不方便写出的内容，比如回车键，换行键，退格键
# 		·借助反斜杠字符，一旦字符串中出现反斜杠，则表示反斜杠后面一个或几个字符已经不是原来的意思了，已经进行了转义
# 			·见 代码片段1
# 		·在字符串中，一旦出现反斜杠就要加倍小心，可能有转义字符出现
# 		·不同系统中对换行操作有不同的表示
# 			·Windows： \n
# 			·Linux： \r\n
# 	字符串的格式化
# 		·把字符串按照一定格式打印或者填充
# 		·格式化有两种方法
# 			·利用百分号 %
# 				·在字符串中，利用%表示一个特殊的含义，表示对字符进行格式化
# 				·%d：表示此处应该放入一个整数
# 				·%s：表示此处应该放入一个字符串
# 				·见 代码片段2
# 			·利用format函数
#				·直接用format函数进行格式化
# 				·推荐使用这种方法
#				·在使用上，以{}和：代替%号，表示占位，后面用format带参数完成
#				·见 代码片段3
# 	None
# 		·表示什么都没有
# 		·如果函数没有返回值，可以返回None
# 		·用来占位置
# 		·用来解除变量的绑定
# 表达式
#	·由一个或者几个数字或者变量和运算符组合成的一行代码
# 	·通常会返回一个结果
# 运算符
# 	·由一个以上的值经过变化得到新值得过程就叫运算
# 	·用于运算的符合叫运算符
# 	·运算符分类
# 		·算数运算符
# 		·比较或者关系运算符
# 		·赋值运算符
# 		·逻辑运算符
# 		·位运算
# 		·成员预算法
# 		·身份运算符
# 		算数运算符
# 			·进行算数运算的符号
# 			·Python里面没有自增自减运算符
# 				·+，-跟数学中正常算数运算一模一样
# 				·乘号用（*）号代替
# 				·除号用（/）代替
# 			·见 代码片段4
# 			取余运算
# 				·使用%号，两个数字相除应该有商数和余数，（%）只会得到余数
# 				·见 代码片段5
# 			幂运算 用**表示
# 				·见 代码片段6
# 		比较运算符
# 			·对两个变量或者值进行比较的运算符
# 				·==，等于号
# 				·!=，不等于
# 				·>， 大于
# 				·<， 小于
# 				·>=，大于等于
# 				·<=，小于等于
# 				·见 代码片段7
# 			·比较的结果是布尔值，即True/False
# 		赋值运算符
# 			·=号，赋值
# 			·+=，是缩写
# 			·所有数学运算符都有缩写形式
# 				·-=，×=，/=，//=，%=，**=，都是缩写形式
# 			·见 代码片段8
# 		逻辑运算符
# 			·对布尔值进行计算的符合
# 				·and 逻辑与
# 				·or  逻辑或
# 				·not 逻辑非
# 			·Python中逻辑运算没有异或运算
# 			·运算规则
# 				·and看作乘法，or看作加法
# 				·True看作1，False看作0
# 				·则逻辑运算就能转换成整数数学运算
# 				·最后结果如果是0则为False，否则为True
# 			·见 代码片段9
# 			·逻辑运算的短路问题
# 				·逻辑运算式，安装运算顺序计算，一旦能够确定整个式子未来的值，则不再进行计算，直接返回
# 				·见 代码片段10
# 		成员运算符合
# 			·用来检测某一个变量是否是另一个变量的成员
# 				·in
# 				·not in
# 			·见 代码片段11
# 		身份运算符
# 			·is：用来检测两个变量是否是同一个变量
# 				·语法就是 var1 is var2
# 			·is not：两个变量不是同一个变量 
# 			·见 代码片段12
# 	·运算符的优先级问题
# 		·永远记住，括号具有最最高优先级
# 		·优先级表格
# 			**       						   指数  最高优先级
# 			~  +  -     					   按位翻转，一元加号和减号（最后两个的方法名为 +@ 和 -@ ）
# 			*  /  %  //  					   乘，除，取模和取整除
# 			+  -      						   加法和减法
# 			>>  <<     						   右移，左移运算符
# 			&         						   位 'AND'
# 			^  |      						   位运算符
# 			<=  <  >  >= 					   比较运算符
# 			<>  ==  !=  					   等于运算符
# 			=  %=  /=  //=  -=  +=  *=  **=    赋值运算符
#			is  is not                         身份运算符
# 			in  not in					       成员运算符
# 			not  or  and               		   逻辑运算符

# 代码片段1
s = "i love lixiaojing"
print(s)
# 如果想表示出Let’s go来
# 1、可以使用嵌套引号,即外层使用双引号
# 2、可以使用转义字符
# s='Let's go'
# 外层使用双引号
s = "Let's go"
print(s)
# 使用转义字符
ss = 'Let\'s go'
print(ss)
# 打印C:\user出来
sss = "C:\\user"
# 回车换行符
s1 = "I love \r\nwangxiaojing"
print(s1)

# 代码片段2
s = "xxx 您好，我们图灵学院开课了，免费的Python呀，不学白不学，学了也白学。"
s = "I love %s "
print(s)  #本次打印，直接把%s作为字符串的一个内容打印出来
print("I love %s"%"wangxiaojing")	#第一个%s表示占位，第二个%后面是即将要替换的真正的值	
print(s%"wangxiaojing")	

# s = "I am xxx years old"
s = "I am %d years old"
print(s)
print(s%18)  #注意上面两个打印的区别和结果
s = "I am %s,I am %d years old"
print(s)
# print(s%"tulingxueyuan")  #此打印会报错，注意出错原因：如果字符串中有占位符，则有几个占位符必须用几个实际内容代替，或者一个也不要，位置一一对应
# print(s%"tulingxueyuan",18)  #此打印也会报错
print(s%("tulingxueyuan",18))  #用括号括起来就对了

# 代码片段3
s = "I love {}".format("lixiaojing")
print(s)
s = "Yes,I am {1} years old,I love {0} and i am {1} years old".format("tulingxueyuan",18)
print(s)

# 代码片段4
a = 9+3-2
print(a)
a = 9*4
print(a)
a = 9/4  
print(a)  #在Python2.x和Python3.x中，除号（/）结果可能不一致，此处以3系列为准

# 代码片段5
a = 9%4
print(a)
a = 9//4
print(a)

# 代码片段6
a = 9**4
print(a)
a = 3**3
print(a)

# 代码片段7
a = 3**4
b = a == 80  #执行顺序是，计算a==80，把结果放入b中
print(b)
print(9!=8)

# 代码片段8
a = 0  #赋值
c = a = 4  #赋值
a += 7  #a=a+7的缩写
print(a)

# 代码片段9
a = True
b = False
c = True
d = a and b or c
print(d)  #上面式子等价于 d=1*0+1
d = a or b and a
print(d)

# 代码片段10
a = True or xxxxxxx  #示例，此逻辑表达式，a的值一定是True，则运行到or的时候，整个表达式不再向下计算
a = False and (xxxxxxxx)  #示例，此表达式，如果xxx里面包含赋值表达式，则结果很难预测
b = 9
# a = a or (b=9) and 6  #示例，假定此表达式没有语法错误，则b最终的值应该是0而不是9
print(b)
print(a)

# 代码片段11
l = [1,2,3,4,5]
a = 7
b = a in l
print(b)
a = 4
print(a in l)
print(a not in l)

# 代码片段12
a = 9
b = 9
print(a is b)
a = "I love wangxiaojing"
b = "I love wangxiaojing"
print(a is b)




