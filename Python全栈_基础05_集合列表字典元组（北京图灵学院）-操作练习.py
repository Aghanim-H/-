'''
# 内置数据结构（或者叫变量类型）
    ·list：列表
        ·一组有顺序的数据的组合
        ·创建列表
            ·空列表
            ·见 代码片段1
        ·列表常用操作
            ·访问操作
                ·使用下标操作（索引）
                ·列表下标的位置是从0开始
                ·见 代码片段2
            ·分片操作
                ·分片操作是生成一个新的list
                    ·内置函数id，负责显示一个变量或者数据的唯一确定编号
                    ·见 代码片段4
                    ·通过id可以直接判断出分片是从新生成了一份数据还是使用的同一份数据？答案：是重新生成了一份数据
                    ·见 代码片段5
                ·对列表进行任意一段的截取：列表名称[:]
                ·下标值可以为空，如果不写，左边下标默认值为0，右边下标值为最大数加一，即表示截取至最后一个数据
                ·分片可以控制步长/步进，默认步长/步进为1
                ·下标可以超出范围，超出后不再考虑多余下标对应的内容
                ·下标值及步进/步长可以为负数，规定：列表最后一个值对应下标为-1。
                ·正下标：从左至右数0，1，2，3，……；负下标：从右至左数-1，-2，-3，-4，……
                ·正常情况下，分片左边的值一定要小于右边的值;如果分片一定左边值比右边大，则步进/步长参数需要使用负数
                ·见代码片段3
    ·set
    ·dict
    ·tuple
'''

# 代码片段1
l1 = []
print(type(l1))  # type是内置函数，负责打印出变量的类型
print(l1)

l2 = [100]
print(type(l2))
print(l2)

l3 = [2,3,4,5,56,454,65,55444,6664,3,4,5,6,4444,5]
print(type(l3))
print(l3)

l4 = list()  # 使用list（）
print(type(l4))
print(l4)

# 代码片段2
l = [3,2,1,888,6,7,99]
print(l[3])
print(l[0])

# 代码片段3
print(l[1:3])  # 截取下标为1至下标为2（3-1）的值片段
print(l[:4])
print(l[2:])
print(l[1:6:2])  # 步进设置为2
print(l[2:20])
print(l[-4:-2])
print(l[-2:-4:-1])  # 此案例为一个list直接正反颠倒提供了一种思路

# 代码片段4
a = 100
b = 200
print(id(a))
print(id(b))
c = a
a = 101
print(id(a))
print(id(c))  # 如果a跟c指向同一个数据，则更改a的值同样也会更改c的值，但是显示结果并非如此，为什么？

# 代码片段5
# 如果两个id值一样，则表面分片产生的列表是使用的同一地址同一份数据，否则，则表明分片是重新生成了一份数据，即一个新的列表，然后把数值拷贝到新列表中
l = [33,0,44,2,55,3,66,4,77,5]
ll = l[:]
lll = ll
print(id(l))
print(id(ll))
print(id(lll))
# 通过id知道，ll和lll是同一份数据，验证如下：
l[1] = 1111
print(l)
print(ll)
ll[1] = 2222
print(ll)
print(lll)










